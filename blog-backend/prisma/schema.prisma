generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enum for predefined content types
enum ContentType {
  EVENTS
  BLOG
  NEWS
  CHARITY
  OTHER
}

enum ContentMode {
  DRAFT
  PUBLISHED
  // ARCHIVED
}

model Content {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  categories ContentCategory[]
  tags       ContentTag[]
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  title      String?
  type       ContentType?
  thumbnail  String?
  
  // SEO Fields
   seoTitle        String?       // Add this
  metaDescription String?       // Add this
  metaKeywords    String[]      // Add this
  
  // Event-specific fields
  location String?
  time     DateTime?
  mode     String @default("DRAFT")
  
  // Relations
  @@index([createdAt])
  @@index([type])
}


model Categories {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  name      String            @unique
  contents  ContentCategory[] // Relation to the join collection
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

// Join collection for many-to-many relationship between Content and Categories
model ContentCategory {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  contentId  String     @db.ObjectId
  categoryId String     @db.ObjectId
  content    Content    @relation(fields: [contentId], references: [id])
  category   Categories @relation(fields: [categoryId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@unique([contentId, categoryId]) // Ensure unique pairs of content and category
}

model Tag {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  name      String       @unique
  contents  ContentTag[] // Relation to the join collection
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

// Join collection for many-to-many relationship between Content and Tag
model ContentTag {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  contentId String   @db.ObjectId
  tagId     String   @db.ObjectId
  content   Content  @relation(fields: [contentId], references: [id])
  tag       Tag      @relation(fields: [tagId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([contentId, tagId]) // Ensure unique pairs of content and tag
}
